어노테이션
Annotation


@RestControlloer에 컨트롤을 누르고 클릭하면 상세 페이지가 뜸.

@Controller
@ResponseBody
@Component

레스트컴포넌트를 선언한 애들은 다 빈이다.


Bean 콩
:스프링이 관리하는 모든 객체는 Bean
:관리하는...의 의미는 스프링의 IOC container가 의존성(Dependency)을 모두 관리한다는 의미임.


동적html을 정적으로 만듦. 템플릿 엔진
html을 동적으로 서버사이드를 하는 프로그램 thymleaf


빈은 내가 언제나 가져다 쓸 수 있는 녀석
객체화를 하지 않아도 함수를 바로바로 쓸 수 있음
bean annotation을 사용하려면 그 class가 bean이어야 사용가능
컨피규레이션



컨트롤러에서 쓰이는 어노테이션

@Component : Class를 bean으로 만듦
@ComponentScan : 하위 자손인 Class를 모두 bean으로 만듦!!
@Bean : method를 bean으로 만듦
@Controller : Servelt의 도움을 받기 위해 넣음(서블렛과 유사한 동작을 하기위함)
@ResponseBody : JASON화해서 전송하는 녀석
@RestController : Controller와 ResponseBody를 합쳐놓음 
@GetMapping : Controller 속에서 쓰임 get방식에 Mapping하겠다
@Override : 내가 상속받은 녀석을 상속받은 추상메소드를 바꿈 익스텐즈에 쓰임(인터페이스에는 x)
@Configuration : 빈 메소드들을 정의하기 위해 쓰임.(초기에 ioc컨소드가 인식하기 쉬움)(Bean 설정클래스)빈 메소드들을 모아놓은 어노테이션

@Primary : 선택할 것이 여러 개 생겼을 시 프라이머리를 사용해 그 빈을 우선적으로 사용하게끔 함.
프라이머리->우선시

(context->ioc컨테이너의 일부나 전체를 가지고 있음.
applicationcontext)

@Primary

@Qualifier => 구현체(@Qaulifier("name"))

@Autowired : 의존성주입 어노테이션
<사용법>
**1. 생성자 주입(@Autowired 생략가능) : 생성자를 만들면 의존성주입이 해결된다는 것!!!!
2. 세터 주입
3. 필드 주입

@Entity : jpa가 있을 때만 사용가능(jpa와 연동, jpa에 의해 관리됨.) Employee를 테이블로 만듦 테이블을 관계형데이터베이스에 맞게 명령을 만들어줌. 스키마를 만들어야겠다고 인식

@Table(name = " ") : 테이블이라는 이름을 지을 수 있음.

@Id //이것을 붙여야 아이디로 입력

@GeneratedValue(strategy = GenerationType.IDENTITY) : 데이터베이스에서 알아서 아이디 값을 증가시킨다. //mySQL에서 사용하는 방법 

@Column(name = "first_name", nullable = false) : 데이터베이스는 보통 스네이크케이스를 사용. column어노테이션은 컬럼의 이름을 다시 지정할 수 있음.

@Column(name = "last_name", nullable = false) : 여러가지 제한,규칙들을 넣을 수 있음(예)nullable등의 속성을 넣을 수 있음. nullalbe은 null값을 허용하는지 여부를 정할 수 있음.

@Service : imployee의 구현체가 서비스로 인해 빈이 된다. 빈의 형태로 만들어줘야 AutoWired를 사용할 수 있음.