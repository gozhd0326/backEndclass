postman에 localhost:8080/api/member/signup을 입력하고 post로 빈 객체 ({ })를 post 할경우 뜨는 에러


{
    "timestamp": "2023-11-03T00:38:14.679+00:00",
    "status": 400,
    "error": "Bad Request",
    "trace": "org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<java.lang.String> hj.securityproject.member.controller.MemberController.signUp(hj.securityproject.member.dto.MemberDto) with 6 errors: [Field error in object 'memberDto' on field 'birthDate': rejected value [null]; codes [NotBlank.memberDto.birthDate,NotBlank.birthDate,NotBlank.java.time.LocalDate,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [memberDto.birthDate,birthDate]; arguments []; default message [birthDate]]; default message [공백일 수 없습니다]] [Field error in object 'memberDto' on field 'name': rejected value [null]; codes [NotBlank.memberDto.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [memberDto.name,name]; arguments []; default message [name]]; default message [공백일 수 없습니다]] [Field error in object 'memberDto' on field 'loginId': rejected value [null]; codes [NotBlank.memberDto.loginId,NotBlank.loginId,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [memberDto.loginId,loginId]; arguments []; default message [loginId]]; default message [공백일 수 없습니다]] [Field error in object 'memberDto' on field 'gender': rejected value [null]; codes [NotBlank.memberDto.gender,NotBlank.gender,NotBlank.hj.securityproject.common.status.Gender,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [memberDto.gender,gender]; arguments []; default message [gender]]; default message [공백일 수 없습니다]] [Field error in object 'memberDto' on field 'email': rejected value [null]; codes [NotBlank.memberDto.email,NotBlank.email,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [memberDto.email,email]; arguments []; default message [email]]; default message [공백일 수 없습니다]] [Field error in object 'memberDto' on field 'password': rejected value [null]; codes [NotBlank.memberDto.password,NotBlank.password,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [memberDto.password,password]; arguments []; default message [password]]; default message [공백일 수 없습니다]] \r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\r\n\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:179)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:146)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\r\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)\r\n",
    "message": "Validation failed for object='memberDto'. Error count: 6",
    "errors": [
        {
            "codes": [
                "NotBlank.memberDto.birthDate",
                "NotBlank.birthDate",
                "NotBlank.java.time.LocalDate",
                "NotBlank"
            ],
            "arguments": [
                {
                    "codes": [
                        "memberDto.birthDate",
                        "birthDate"
                    ],
                    "arguments": null,
                    "defaultMessage": "birthDate",
                    "code": "birthDate"
                }
            ],
            "defaultMessage": "공백일 수 없습니다",
            "objectName": "memberDto",
            "field": "birthDate",
            "rejectedValue": null,
            "bindingFailure": false,
            "code": "NotBlank"
        },
        {
            "codes": [
                "NotBlank.memberDto.name",
                "NotBlank.name",
                "NotBlank.java.lang.String",
                "NotBlank"
            ],
            "arguments": [
                {
                    "codes": [
                        "memberDto.name",
                        "name"
                    ],
                    "arguments": null,
                    "defaultMessage": "name",
                    "code": "name"
                }
            ],
            "defaultMessage": "공백일 수 없습니다",
            "objectName": "memberDto",
            "field": "name",
            "rejectedValue": null,
            "bindingFailure": false,
            "code": "NotBlank"
        },
        {
            "codes": [
                "NotBlank.memberDto.loginId",
                "NotBlank.loginId",
                "NotBlank.java.lang.String",
                "NotBlank"
            ],
            "arguments": [
                {
                    "codes": [
                        "memberDto.loginId",
                        "loginId"
                    ],
                    "arguments": null,
                    "defaultMessage": "loginId",
                    "code": "loginId"
                }
            ],
            "defaultMessage": "공백일 수 없습니다",
            "objectName": "memberDto",
            "field": "loginId",
            "rejectedValue": null,
            "bindingFailure": false,
            "code": "NotBlank"
        },
        {
            "codes": [
                "NotBlank.memberDto.gender",
                "NotBlank.gender",
                "NotBlank.hj.securityproject.common.status.Gender",
                "NotBlank"
            ],
            "arguments": [
                {
                    "codes": [
                        "memberDto.gender",
                        "gender"
                    ],
                    "arguments": null,
                    "defaultMessage": "gender",
                    "code": "gender"
                }
            ],
            "defaultMessage": "공백일 수 없습니다",
            "objectName": "memberDto",
            "field": "gender",
            "rejectedValue": null,
            "bindingFailure": false,
            "code": "NotBlank"
        },
        {
            "codes": [
                "NotBlank.memberDto.email",
                "NotBlank.email",
                "NotBlank.java.lang.String",
                "NotBlank"
            ],
            "arguments": [
                {
                    "codes": [
                        "memberDto.email",
                        "email"
                    ],
                    "arguments": null,
                    "defaultMessage": "email",
                    "code": "email"
                }
            ],
            "defaultMessage": "공백일 수 없습니다",
            "objectName": "memberDto",
            "field": "email",
            "rejectedValue": null,
            "bindingFailure": false,
            "code": "NotBlank"
        },
        {
            "codes": [
                "NotBlank.memberDto.password",
                "NotBlank.password",
                "NotBlank.java.lang.String",
                "NotBlank"
            ],
            "arguments": [
                {
                    "codes": [
                        "memberDto.password",
                        "password"
                    ],
                    "arguments": null,
                    "defaultMessage": "password",
                    "code": "password"
                }
            ],
            "defaultMessage": "공백일 수 없습니다",
            "objectName": "memberDto",
            "field": "password",
            "rejectedValue": null,
            "bindingFailure": false,
            "code": "NotBlank"
        }
    ],
    "path": "/api/member/signup"
}

이 에러의 문제점은 가독성이 좋지 않다. 프론트엔드 개발자가 받아 처리하기 쉽지 않다. 
이 코드에서는 dafaultMessage와 field 정도의 정보만 있어도 어떤 곳에서 무슨 에러가 났는지 알아 챌 수 있다.


{
    "resultCode": "ERROR",
    "data": {
        "password": "공백일 수 없습니다",
        "loginId": "공백일 수 없습니다",
        "gender": "공백일 수 없습니다",
        "name": "공백일 수 없습니다",
        "birthDate": "공백일 수 없습니다",
        "email": "공백일 수 없습니다"
    },
    "message": "에러가 발생했습니다."
}
{
    "resultCode": "SUCCESS",
    "data": null,
    "message": "이미 등록된 아이디입니다."
}
{
    "resultCode": "SUCCESS",
    "data": null,
    "message": "회원가입이 완료되었습니다."
}