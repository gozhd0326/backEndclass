<스프링의 목적>

개발자는 
1. 비지니스로직 설계
2. 핵심 코드 작성
두가지에 힘을 쏟도록 하는 것!!!!


1. 설계 === 인터페이스 (설계도)
 ex) package com.hj.firstapp.game;

public interface GamingConsole {

	//추상메소드
	void up();
	void down();
	void left();
	void right();
	
}


2. 핵심코드 === 구현체( 인터페이스를 상속받은 클래스, 설계도를 받아다 실제 코드를 작성)
ex)package com.hj.firstapp.game;

//MarioGame은 구현체임.

public class MarioGame implements GamingConsole{
	
	public void up() {
		System.out.println("Jump");
	}
	public void down() {
		System.out.println("Go in a hole");
	}
	public void left() {
		System.out.println("Go back");
	}
	public void right() {
		System.out.println("Accelerate");
	}
}

인터페이스를 만드는게 좋은 습관임.
그 밑에 구현체를 따로 만들기.

서비스는 인터페이스가 필요 없음.
레파지토리는 인터페이스를 필요로 함
jpa가 인터페이스를 받아 일을 함.



EmployeeService.java(interface)
상속받아 만드는 클래스
EmployeeServiceImpl.java(아이엠피엘붙이기)
임플은 버전이라고 생각하면 됨.

인터페이스는 강제성이 있어 코드를 짜고 싶어도 따로 짤수가 없게끔 함( 클래스는 뒤에 중괄호를 쓰지만 중괄호를 못씀.)
똑같은 인터페이스에서 상속받았기 때문에 유지보수하기가 편함
ex)버전에 따른 구분 또는 기능구현방법에 따른 구분일 수도 있음.
EmployeeServiceImpl1.java
EmployeeServiceImpl2.java
EmployeeServiceImpl3.java
EmployeeServiceImpl4.java


void => 리턴이 없다. 비어 있다.

ResponseEntity는 응답에 성공했을 때, 실패했을 때의 메세지를 정할 수 있다.

ResponseEntity.ok => 메소드
new ResponseEntity() => 생성자


java.lang.NullPointerException => 임플로이가 널이다. 아무것도 없다.
컨트롤러에서 서비스로 임플로이 정보가 오지 않았다.


HttpStatus => http의 상태(상태코드) === 결과


인스턴스화 할 수 없다 => 메모리를 점유화 할 수 없다.
싱글턴 => 메모리 상에 하나만 차지할 수 있다.

인터페이스 뒤에 . 을 찍는 순간 인스턴스의 구현체를 찾아서 입력함.

extends JpaRepository<T(클래스 타입), ID(아이디의 데이터타입)>

Jpa는 자기가 만든 구현체를 사용한다.(그러기 위해서는 인터페이스여야 된다.)=>save라는 메소드를 동작할 수 있도록 함

//jpa(orm의 통칭)의 구현체는 hibernate 이다.
