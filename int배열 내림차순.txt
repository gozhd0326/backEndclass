[Error] no suitable method found for sort(int[],java.util.Comparator<java.lang.Object>)

오류가 발생한 상황
int 배열을 내림차순으로 정렬하고자 했다.
Comparator에 Collections.reverseOrder()를 사용하려고 한 순간 오류가 발생했다.

public String solution(int[] numbers) {
        Arrays.sort(numbers, Collections.reverseOrder());
}
원인
https://darkstart.tistory.com/209

✅ primitive 타입에 대한 Comparator가 없기 때문에

Comparator는 원시 타입인 int 배열에서는 사용할 수 없고, 객체(Integer) 배열에서는 사용 가능함

따라서 Comparator를 사용하기 위해서 int[] → Integer[]로 바꾸던가, Comparator를 사용하지 않고, 정렬 알고리즘을 통해 int[]을 따로 정렬해야 한다.
정렬 알고리즘을 사용하기 보다는, int[]을 Integer[] 또는 List<Integer>로 바꿔보겠다.

해결
방법 1) int[] → Integer[]
Stream boxed()에 대한 설명

Integer[] newArray = Arrays.stream(array).boxed().toArray(Integer[]::new);
Arrays.sort(newArray, Collections.reverseOrder());

방법 2) int[] → List<Integer>
https://stackoverflow.com/questions/1073919/how-to-convert-int-into-listinteger-in-java

List<Integer> list = Arrays.stream(ints).boxed().collect(Collectors.toList());
list.sort(Comparator.reverseOrder());
즉, 원시 타입의 배열을 객체 타입의 배열로 바꾸고, Comparator를 사용하자!

출처 본문 : https://velog.io/@chaeeun2030/Error-no-suitable-method-found-for-sortintjava.util.Comparatorjava.lang.Object




[Java] Collections.reverseOrder()를 활용한 내림차순 정렬시 컴파일 에러 (with. int형 배열)

자바 코딩테스트 준비를 위해 공부하던 중 Arrays.sort()함수로 내림차순으로 정렬하는데 문제가 발생하였다.

다음과 같은 코드로 오름차순 정렬을 하였을 때 정상적으로 동작하였다.

int[] arr = {10, 8, 11, 2, 3, 0};

Arrays.sort(arr); // 오름차순 정렬
for(int n: arr) System.out.print(n + " ");
내림차순으로 정렬하기 위해 다음과 같이 코드를 작성하였는데 컴파일 오류가 발생하였다.

int[] arr = {10, 8, 11, 2, 3, 0};

Arrays.sort(arr, Collections.reverseOrder()); // 내림차순 정렬
for(int n: arr) System.out.print(n + " ");
에러
java: no suitable method found for sort(int[],java.util.Comparator<java.lang.Object>)
method java.util.Arrays.sort(T[],java.util.Comparator<? super T>) is not applicable
(inference variable T has incompatible bounds
equality constraints: int
lower bounds: java.lang.Object)
method java.util.Arrays.sort(T[],int,int,java.util.Comparator<? super T>) is not applicable
(cannot infer type-variable(s) T
(actual and formal argument lists differ in length))

간단하게 요약하면, Arrays.<T>sort(T[], java.util.Comparator<? super T>)에서 T가 int형을 호환하지 않는다는 내용이다.

어떤 객체든 호환하는 Generic Class 입장에서 int형은 객체가 아닌 원시 타입이여서 호환하지 않는다.

따라서 int[] arr 을 Integer[] arr로 수정함으로써 해결할 수 있다.

import java.util.*;
import java.io.*;

class Solution{
    public static void main(String[] args) {
        Integer[] arr = {10, 8, 11, 2, 3, 0};

        Arrays.sort(arr); // 오름차순 정렬
        System.out.print("Arrays.sort(arr) : ");
        for(int n: arr) System.out.print(n + " ");
        System.out.println();
        
        Arrays.sort(arr, Collections.reverseOrder()); // 내림차순 정렬
        System.out.print("Arrays.sort(arr, Collections.reverseOrder()) : ");
        for(int n: arr) System.out.print(n + " ");
    }
}
+) int형 배열을 Integer 배열로 바꾸는 방법
Integer[] arr = Arrays.stream(_arr).boxed().toArray(Integer[]::new);

그러면 왜 오름차순 정렬은 정상 동작을 하였는가?

자바 내장 클래스 Arrays 내부에 다음과 같은 코드가 있다. 그래서 오름차순은 int[] 형이어도 정상 동작한 것이다.

public static void sort(int[] a) {
    DualPivotQuicksort.sort(a, 0, 0, a.length);
}


본문 출처 : https://velog.io/@soomanbaek/Java-Collections.reverseOrder%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%82%B4%EB%A6%BC%EC%B0%A8%EC%88%9C-%EC%A0%95%EB%A0%AC%EC%8B%9C-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%97%90%EB%9F%AC-with.-int%ED%98%95-%EB%B0%B0%EC%97%B4